#!/usr/bin/env node
'use strict';

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _server = require('../server');

var _server2 = _interopRequireDefault(_server);

var _fs = require('fs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

process.env.NODE_ENV = process.env.NODE_ENV || 'production';

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port'
  },
  boolean: ['h'],
  default: {
    p: 3000
  }
});

if (argv.help) {
  console.log('\n    Description\n      Starts the application in production mode.\n      The application should be compiled with `next build` first.\n\n    Usage\n      $ next start <dir> -p <port>\n\n    <dir> is the directory that contains the compiled .next folder\n    created by running `next build`.\n    If no directory is provided, the current directory will be assumed.\n\n    Options\n      --port, -p      A port number on which to start the application\n      --help, -h      Displays this message\n  ');
  process.exit(0);
}

var dir = (0, _path.resolve)(argv._[0] || '.');

var srv = new _server2.default({ dir: dir });

if (!(0, _fs.existsSync)((0, _path.resolve)(dir, '.next', 'BUILD_ID'))) {
  console.error('> Could not find a valid build in the \'.next\' directory! Try building your app with \'next build\' before starting the server.');
  process.exit(1);
}

srv.start(argv.port).then(function () {
  if (!process.env.NOW) {
    console.log('> Ready on http://localhost:' + argv.port);
  }
}).catch(function (err) {
  console.error(err);
  process.exit(1);
});